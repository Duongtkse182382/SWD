{
  "openapi": "3.0.0",
  "info": {
    "title": "Spa system",
    "version": "1.0.0",
    "description": "Skincare service system"
  },
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication management"
    },
    {
      "name": "Questions",
      "description": "Question management"
    },
    {
      "name": "Calendars",
      "description": "Calendar management"
    },
    {
      "name": "Services",
      "description": "Service management"
    },
    {
      "name": "Appointments",
      "description": "Appointment management"
    },
    {
      "name": "Blogs",
      "description": "Blog management"
    },
    {
      "name": "BookingRequests",
      "description": "Booking request management"
    },
    {
      "name": "Consultants",
      "description": "Consultant management"
    },
    {
      "name": "Customers",
      "description": "Customer management"
    },
    {
      "name": "Feedbacks",
      "description": "Feedback management"
    },
    {
      "name": "OrderItems",
      "description": "Order item management"
    },
    {
      "name": "OrderProducts",
      "description": "Order product management"
    },
    {
      "name": "Products",
      "description": "Product management"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "User": {
        "properties": {
          "firstName": {
            "type": "string",
            "description": "The first name of the user"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the user"
          },
          "email": {
            "type": "string",
            "description": "The email of the user"
          },
          "password": {
            "type": "string",
            "description": "The password of the user"
          },
          "roleName": {
            "type": "string",
            "enum": [
              "Customer",
              "Staff",
              "Manager",
              "Consultant"
            ],
            "description": "The role of the user"
          },
          "roleId": {
            "type": "string",
            "description": "The role ID of the user"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The phone number of the user"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the user was created"
          },
          "updatedDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the user was last updated"
          },
          "verified": {
            "type": "boolean",
            "description": "Whether the user is verified"
          },
          "verificationToken": {
            "type": "string",
            "description": "The verification token for the user"
          },
          "verificationTokenCreatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the verification token was created"
          },
          "resetPasswordToken": {
            "type": "string",
            "description": "The reset password token for the user"
          },
          "resetPasswordExpires": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the reset password token expires"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "email",
          "password",
          "roleName"
        ]
      },
      "Calendar": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The auto-generated id of the calendar event"
          },
          "title": {
            "type": "string",
            "description": "The title of the calendar"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "The date of the calendar"
          },
          "time": {
            "type": "string",
            "description": "The time of the calendar"
          }
        },
        "required": [
          "title",
          "date",
          "time"
        ]
      },
      "Question": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The auto-generated id of the calendar event"
          },
          "questionText": {
            "type": "string",
            "description": "The text of the question"
          },
          "answerOptions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "answerText": {
                  "type": "string",
                  "description": "The text of the answer option"
                },
                "weight": {
                  "type": "number",
                  "description": "The weight of the answer option"
                }
              },
              "required": [
                "answerText",
                "weight"
              ]
            },
            "description": "The answer options for the question"
          }
        },
        "required": [
          "questionText",
          "answerOptions"
        ]
      },
      "Service": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The auto-generated id of the calendar event"
          },
          "price": {
            "type": "number",
            "description": "The price of the service",
            "minimum": 0
          },
          "name": {
            "type": "string",
            "description": "The name of the service",
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "description": "The description of the service"
          },
          "detaildescription": {
            "type": "string",
            "description": "The detailed description of the service"
          },
          "image": {
            "type": "string",
            "description": "The URL of the service image",
            "pattern": "^https?:\\/\\/.*\\.(jpg|jpeg|png|gif|webp)$"
          },
          "effectimage": {
            "type": "string",
            "description": "The URL of the effect image",
            "pattern": "^https?:\\/\\/.*\\.(jpg|jpeg|png|gif|webp)$"
          },
          "resultimage": {
            "type": "string",
            "description": "The URL of the result image",
            "pattern": "^https?:\\/\\/.*\\.(jpg|jpeg|png|gif|webp)$"
          },
          "sensationimage": {
            "type": "string",
            "description": "The URL of the sensation image",
            "pattern": "^https?:\\/\\/.*\\.(jpg|jpeg|png|gif|webp)$"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the service was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the service was last updated"
          }
        },
        "required": [
          "price",
          "name"
        ]
      },
      "Appointment": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The auto-generated id of the appointment"
          },
          "memberId": {
            "type": "string",
            "description": "The ID of the member"
          },
          "serviceId": {
            "type": "string",
            "description": "The ID of the service"
          },
          "status": {
            "type": "string",
            "enum": [
              "Pending",
              "Paid",
              "Canceled"
            ],
            "description": "The status of the appointment"
          },
          "amount": {
            "type": "number",
            "description": "The amount for the appointment",
            "minimum": 0
          },
          "appointmentCode": {
            "type": "string",
            "description": "The unique code for the appointment"
          },
          "description": {
            "type": "string",
            "description": "The description of the appointment"
          },
          "buyerName": {
            "type": "string",
            "description": "The name of the buyer"
          },
          "buyerEmail": {
            "type": "string",
            "description": "The email of the buyer"
          },
          "buyerPhone": {
            "type": "string",
            "description": "The phone number of the buyer"
          },
          "transactionDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time of the transaction"
          },
          "currency": {
            "type": "string",
            "description": "The currency used for the payment"
          },
          "paymentMethod": {
            "type": "string",
            "description": "The payment method used"
          }
        },
        "required": [
          "memberId",
          "serviceId",
          "amount",
          "appointmentCode",
          "description",
          "buyerName",
          "buyerEmail",
          "buyerPhone"
        ]
      },
      "Blog": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The auto-generated id of the blog post"
          },
          "title": {
            "type": "string",
            "description": "The title of the blog post"
          },
          "image": {
            "type": "string",
            "description": "The URL of the blog post image"
          },
          "description": {
            "type": "string",
            "description": "The description of the blog post"
          },
          "content": {
            "type": "string",
            "description": "The content of the blog post"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the blog post was created"
          },
          "availability": {
            "type": "boolean",
            "description": "The availability status of the blog post"
          }
        },
        "required": [
          "title",
          "content"
        ]
      },
      "BookingRequest": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The auto-generated id of the booking request"
          },
          "serviceID": {
            "type": "string",
            "description": "The ID of the service"
          },
          "customerID": {
            "type": "string",
            "description": "The ID of the customer"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "The date of the booking request"
          },
          "time": {
            "type": "string",
            "description": "The time of the booking request"
          },
          "consultantID": {
            "type": "string",
            "description": "The ID of the consultant"
          },
          "status": {
            "type": "string",
            "enum": [
              "Pending",
              "Confirmed",
              "Completed",
              "Cancelled"
            ],
            "description": "The status of the booking request"
          },
          "isConsultantAssignedByCustomer": {
            "type": "boolean",
            "description": "Whether the consultant was assigned by the customer"
          }
        },
        "required": [
          "serviceID",
          "customerID",
          "date",
          "time",
          "status"
        ]
      },
      "Consultant": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The auto-generated id of the consultant"
          },
          "user": {
            "type": "string",
            "description": "The ID of the user associated with the consultant"
          },
          "ratings": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "user": {
                  "type": "string",
                  "description": "The ID of the user who gave the rating"
                },
                "rating": {
                  "type": "number",
                  "description": "The rating given by the user",
                  "minimum": 1,
                  "maximum": 5
                },
                "comment": {
                  "type": "string",
                  "description": "The comment given by the user"
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date when the rating was created"
                }
              }
            }
          },
          "note": {
            "type": "string",
            "description": "The note for the consultant"
          },
          "image": {
            "type": "string",
            "description": "The image URL of the consultant"
          },
          "averageRating": {
            "type": "number",
            "description": "The average rating of the consultant"
          }
        },
        "required": [
          "user"
        ]
      },
      "Feedback": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The auto-generated id of the feedback"
          },
          "bookingRequestId": {
            "type": "string",
            "description": "The ID of the associated booking request"
          },
          "serviceId": {
            "type": "string",
            "description": "The ID of the associated service"
          },
          "consultantId": {
            "type": "string",
            "description": "The ID of the associated consultant"
          },
          "serviceRating": {
            "type": "number",
            "description": "The rating for the service",
            "minimum": 1,
            "maximum": 5
          },
          "serviceComment": {
            "type": "string",
            "description": "The comment for the service",
            "maxLength": 500
          },
          "consultantRating": {
            "type": "number",
            "description": "The rating for the consultant",
            "minimum": 1,
            "maximum": 5
          },
          "consultantComment": {
            "type": "string",
            "description": "The comment for the consultant",
            "maxLength": 500
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the feedback was created"
          }
        },
        "required": [
          "bookingRequestId",
          "serviceId",
          "consultantId",
          "serviceRating",
          "consultantRating"
        ]
      },
      "OrderItem": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The auto-generated id of the order item"
          },
          "orderID": {
            "type": "string",
            "description": "The ID of the associated order"
          },
          "productID": {
            "type": "string",
            "description": "The ID of the associated product"
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of the product in the order",
            "minimum": 1
          }
        },
        "required": [
          "orderID",
          "productID",
          "quantity"
        ]
      },
      "OrderProduct": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The auto-generated id of the order"
          },
          "customerID": {
            "type": "string",
            "description": "The ID of the customer who placed the order"
          },
          "orderCode": {
            "type": "string",
            "description": "The unique code for the order"
          },
          "status": {
            "type": "string",
            "enum": [
              "Pending",
              "Confirmed",
              "Cancelled",
              "Completed"
            ],
            "description": "The status of the order"
          },
          "orderItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            },
            "description": "The list of items in the order"
          },
          "totalPrice": {
            "type": "number",
            "description": "The total price of the order"
          },
          "paymentMethod": {
            "type": "string",
            "enum": [
              "Cash",
              "Credit Card",
              "PayPal",
              "PayOS"
            ],
            "description": "The payment method used for the order"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the order was created"
          }
        },
        "required": [
          "customerID",
          "orderCode",
          "status",
          "orderItems",
          "totalPrice",
          "paymentMethod"
        ]
      },
      "Product": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The auto-generated id of the product"
          },
          "productName": {
            "type": "string",
            "description": "The name of the product"
          },
          "description": {
            "type": "string",
            "description": "The description of the product"
          },
          "price": {
            "type": "number",
            "description": "The price of the product",
            "minimum": 0
          },
          "availability": {
            "type": "boolean",
            "description": "The availability status of the product"
          },
          "stock": {
            "type": "number",
            "description": "The stock quantity of the product",
            "minimum": 0
          },
          "imgURL": {
            "type": "string",
            "description": "The URL of the product image"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the product was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the product was last updated"
          }
        },
        "required": [
          "productName",
          "description",
          "price",
          "stock"
        ]
      }
    }
  },
  "paths": {
    "/auth/register": {
      "post": {
        "summary": "Register a new user",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully"
          },
          "400": {
            "description": "Email or phone number already in use"
          },
          "500": {
            "description": "An error occurred during registration"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Login a user",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                },
                "required": [
                  "email",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged in successfully"
          },
          "400": {
            "description": "Invalid email or password"
          },
          "403": {
            "description": "Please verify your email before logging in"
          },
          "500": {
            "description": "Error logging in"
          }
        }
      }
    },
    "/auth/verify": {
      "get": {
        "summary": "Verify email",
        "tags": [
          "Auth"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email verified successfully"
          },
          "400": {
            "description": "No token provided or invalid token"
          },
          "500": {
            "description": "Verification failed"
          }
        }
      }
    },
    "/auth/forgot-password": {
      "post": {
        "summary": "Request password reset",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  }
                },
                "required": [
                  "email"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset link sent to your email"
          },
          "404": {
            "description": "Email has not been registered"
          },
          "500": {
            "description": "Error requesting password reset"
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "summary": "Reset password",
        "tags": [
          "Auth"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "newPassword": {
                    "type": "string"
                  }
                },
                "required": [
                  "newPassword"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful"
          },
          "400": {
            "description": "Invalid or expired token"
          },
          "500": {
            "description": "Error resetting password"
          }
        }
      }
    },
    "/auth/resend-verification-email": {
      "post": {
        "summary": "Resend verification email",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  }
                },
                "required": [
                  "email"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification email resent successfully"
          },
          "404": {
            "description": "Email not found"
          },
          "500": {
            "description": "Error resending verification email"
          }
        }
      }
    },
    "/services": {
      "get": {
        "summary": "Get all services",
        "tags": [
          "Services"
        ],
        "responses": {
          "200": {
            "description": "List of all services",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Service"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new service",
        "tags": [
          "Services"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Service"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Service created successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "An error occurred during service creation"
          }
        }
      }
    },
    "/services/{id}": {
      "get": {
        "summary": "Get a specific service by ID",
        "tags": [
          "Services"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the service"
          }
        ],
        "responses": {
          "200": {
            "description": "Service details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          },
          "404": {
            "description": "Service not found"
          }
        }
      },
      "put": {
        "summary": "Update a service",
        "tags": [
          "Services"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the service"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Service"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Service updated successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Service not found"
          },
          "500": {
            "description": "An error occurred during service update"
          }
        }
      },
      "delete": {
        "summary": "Delete a service",
        "tags": [
          "Services"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the service"
          }
        ],
        "responses": {
          "200": {
            "description": "Service deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Service not found"
          },
          "500": {
            "description": "An error occurred during service deletion"
          }
        }
      }
    },
    "/calendars/create": {
      "post": {
        "summary": "Create a new calendar event",
        "tags": [
          "Calendars"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Calendar"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Calendar event created successfully"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "An error occurred while creating the calendar event"
          }
        }
      }
    },
    "/calendars/events": {
      "get": {
        "summary": "Get all calendar events",
        "tags": [
          "Calendars"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of all calendar events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Calendar"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "An error occurred while fetching the calendar events"
          }
        }
      }
    },
    "/questions": {
      "get": {
        "summary": "Get all questions",
        "tags": [
          "Questions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of all questions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Question"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add a new question",
        "tags": [
          "Questions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Question"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Question has been added successfully!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Question"
                }
              }
            }
          }
        }
      }
    },
    "/questions/{id}": {
      "put": {
        "summary": "Update a question",
        "tags": [
          "Questions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The question ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Question"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Question has been updated successfully!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Question"
                }
              }
            }
          },
          "404": {
            "description": "Question is not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a question",
        "tags": [
          "Questions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The question ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Question has been deleted successfully!"
          },
          "404": {
            "description": "Question is not found"
          }
        }
      }
    },
    "/appointments": {
      "get": {
        "summary": "Get all appointments",
        "tags": [
          "Appointments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of all appointments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Appointment"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "An error occurred while fetching the appointments"
          }
        }
      },
      "post": {
        "summary": "Create a new appointment",
        "tags": [
          "Appointments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Appointment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Appointment created successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "An error occurred while creating the appointment"
          }
        }
      }
    },
    "/appointments/{id}": {
      "get": {
        "summary": "Get a specific appointment by ID",
        "tags": [
          "Appointments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the appointment"
          }
        ],
        "responses": {
          "200": {
            "description": "Appointment details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Appointment"
                }
              }
            }
          },
          "404": {
            "description": "Appointment not found"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "An error occurred while fetching the appointment"
          }
        }
      },
      "delete": {
        "summary": "Delete an appointment",
        "tags": [
          "Appointments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the appointment"
          }
        ],
        "responses": {
          "200": {
            "description": "Appointment deleted successfully"
          },
          "404": {
            "description": "Appointment not found"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "An error occurred while deleting the appointment"
          }
        }
      }
    },
    "/blogs": {
      "get": {
        "summary": "Get all blog posts",
        "tags": [
          "Blogs"
        ],
        "responses": {
          "200": {
            "description": "List of all blog posts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Blog"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error. Please try again."
          }
        }
      },
      "post": {
        "summary": "Create a new blog post",
        "tags": [
          "Blogs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Blog"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Blog post created successfully"
          },
          "500": {
            "description": "Server error. Please try again."
          }
        }
      }
    },
    "/blogs/{postId}": {
      "get": {
        "summary": "Get a single blog post by ID",
        "tags": [
          "Blogs"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "postId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the blog post"
          }
        ],
        "responses": {
          "200": {
            "description": "Blog post details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Blog"
                }
              }
            }
          },
          "404": {
            "description": "Blog post not found"
          },
          "500": {
            "description": "Server error. Please try again."
          }
        }
      },
      "put": {
        "summary": "Update a blog post",
        "tags": [
          "Blogs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "postId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the blog post"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Blog"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Blog post updated successfully"
          },
          "404": {
            "description": "Blog post not found"
          },
          "500": {
            "description": "Server error. Please try again."
          }
        }
      },
      "delete": {
        "summary": "Delete a blog post",
        "tags": [
          "Blogs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "postId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the blog post"
          }
        ],
        "responses": {
          "200": {
            "description": "Blog post deleted successfully"
          },
          "404": {
            "description": "Blog post not found"
          },
          "500": {
            "description": "Server error. Please try again."
          }
        }
      }
    },
    "/booking-requests": {
      "post": {
        "summary": "Create a new booking request",
        "tags": [
          "BookingRequests"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Booking request created successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "An error occurred while creating the booking request"
          }
        }
      },
      "get": {
        "summary": "Get all booking requests",
        "tags": [
          "BookingRequests"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of all booking requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BookingRequest"
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occurred while fetching the booking requests"
          }
        }
      }
    },
    "/booking-requests/{id}": {
      "get": {
        "summary": "Get a booking request by ID",
        "tags": [
          "BookingRequests"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the booking request"
          }
        ],
        "responses": {
          "200": {
            "description": "Booking request details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingRequest"
                }
              }
            }
          },
          "404": {
            "description": "Booking request not found"
          },
          "500": {
            "description": "An error occurred while fetching the booking request"
          }
        }
      },
      "put": {
        "summary": "Update a booking request",
        "tags": [
          "BookingRequests"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the booking request"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Booking request updated successfully"
          },
          "404": {
            "description": "Booking request not found"
          },
          "500": {
            "description": "An error occurred while updating the booking request"
          }
        }
      },
      "delete": {
        "summary": "Delete a booking request",
        "tags": [
          "BookingRequests"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the booking request"
          }
        ],
        "responses": {
          "200": {
            "description": "Booking request deleted successfully"
          },
          "404": {
            "description": "Booking request not found"
          },
          "500": {
            "description": "An error occurred while deleting the booking request"
          }
        }
      }
    },
    "/booking-requests/{id}/status": {
      "put": {
        "summary": "Update the status of a booking request",
        "tags": [
          "BookingRequests"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the booking request"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "Pending",
                      "Confirmed",
                      "Completed",
                      "Cancelled"
                    ],
                    "description": "The new status of the booking request"
                  }
                },
                "required": [
                  "status"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Booking request status updated successfully"
          },
          "400": {
            "description": "Invalid status transition"
          },
          "404": {
            "description": "Booking request not found"
          },
          "500": {
            "description": "An error occurred while updating the booking request status"
          }
        }
      }
    },
    "/booking-requests/booked-times": {
      "get": {
        "summary": "Get booked times for a consultant on a specific date",
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "consultantID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the consultant"
          },
          {
            "in": "query",
            "name": "date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "The date to check for booked times"
          }
        ],
        "responses": {
          "200": {
            "description": "List of booked times",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required parameters"
          },
          "500": {
            "description": "An error occurred while fetching the booked times"
          }
        }
      }
    },
    "/booking-requests/my-bookings": {
      "get": {
        "summary": "Get bookings for the authenticated consultant",
        "tags": [
          "BookingRequests"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of bookings for the authenticated consultant",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BookingRequest"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "An error occurred while fetching the bookings"
          }
        }
      }
    },
    "/booking-requests/history-bookings": {
      "get": {
        "summary": "Get booking history for the authenticated customer",
        "tags": [
          "BookingRequests"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of booking history for the authenticated customer",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BookingRequest"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "An error occurred while fetching the booking history"
          }
        }
      }
    },
    "/booking-requests/{id}/cancel": {
      "put": {
        "summary": "Cancel a booking request",
        "tags": [
          "BookingRequests"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the booking request"
          }
        ],
        "responses": {
          "200": {
            "description": "Booking request canceled successfully"
          },
          "404": {
            "description": "Booking request not found"
          },
          "500": {
            "description": "An error occurred while canceling the booking request"
          }
        }
      }
    },
    "/booking-requests/{id}/confirm": {
      "put": {
        "summary": "Confirm a booking request",
        "tags": [
          "BookingRequests"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the booking request"
          }
        ],
        "responses": {
          "200": {
            "description": "Booking request confirmed successfully"
          },
          "404": {
            "description": "Booking request not found"
          },
          "500": {
            "description": "An error occurred while confirming the booking request"
          }
        }
      }
    },
    "/booking-requests/{id}/complete": {
      "put": {
        "summary": "Complete a booking request",
        "tags": [
          "BookingRequests"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the booking request"
          }
        ],
        "responses": {
          "200": {
            "description": "Booking request completed successfully"
          },
          "404": {
            "description": "Booking request not found"
          },
          "500": {
            "description": "An error occurred while completing the booking request"
          }
        }
      }
    },
    "/booking-requests/{id}/assign": {
      "put": {
        "summary": "Assign a consultant to a booking request",
        "tags": [
          "BookingRequests"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the booking request"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "consultantID": {
                    "type": "string",
                    "description": "The ID of the consultant to assign"
                  }
                },
                "required": [
                  "consultantID"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Consultant assigned successfully"
          },
          "404": {
            "description": "Booking request not found"
          },
          "500": {
            "description": "An error occurred while assigning the consultant"
          }
        }
      }
    },
    "/booking-requests/{consultantId}/pending-bookings": {
      "get": {
        "summary": "Get pending bookings for a consultant",
        "tags": [
          "BookingRequests"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "consultantId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the consultant"
          }
        ],
        "responses": {
          "200": {
            "description": "List of pending bookings for the consultant",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BookingRequest"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Consultant not found"
          },
          "500": {
            "description": "An error occurred while fetching the pending bookings"
          }
        }
      }
    },
    "/consultants": {
      "get": {
        "summary": "Get all consultants",
        "tags": [
          "Consultants"
        ],
        "responses": {
          "200": {
            "description": "List of all consultants",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Consultant"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error. Please try again."
          }
        }
      },
      "post": {
        "summary": "Create a new consultant",
        "tags": [
          "Consultants"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Consultant"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Consultant created successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "An error occurred while creating the consultant"
          }
        }
      }
    },
    "/consultants/{id}": {
      "get": {
        "summary": "Get a consultant by ID",
        "tags": [
          "Consultants"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the consultant"
          }
        ],
        "responses": {
          "200": {
            "description": "Consultant details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Consultant"
                }
              }
            }
          },
          "404": {
            "description": "Consultant not found"
          },
          "500": {
            "description": "Server error. Please try again."
          }
        }
      },
      "put": {
        "summary": "Update a consultant",
        "tags": [
          "Consultants"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the consultant"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Consultant"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Consultant updated successfully"
          },
          "404": {
            "description": "Consultant not found"
          },
          "500": {
            "description": "Server error. Please try again."
          }
        }
      },
      "delete": {
        "summary": "Delete a consultant",
        "tags": [
          "Consultants"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the consultant"
          }
        ],
        "responses": {
          "200": {
            "description": "Consultant deleted successfully"
          },
          "404": {
            "description": "Consultant not found"
          },
          "500": {
            "description": "Server error. Please try again."
          }
        }
      }
    },
    "/consultants/{id}/rate": {
      "post": {
        "summary": "Add a rating to a consultant",
        "tags": [
          "Consultants"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the consultant"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "rating": {
                    "type": "number",
                    "description": "The rating given by the user",
                    "minimum": 1,
                    "maximum": 5
                  },
                  "comment": {
                    "type": "string",
                    "description": "The comment given by the user"
                  }
                },
                "required": [
                  "rating"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rating added/updated successfully"
          },
          "404": {
            "description": "Consultant not found"
          },
          "500": {
            "description": "Server error. Please try again."
          }
        }
      }
    },
    "/consultants/{id}/reset-password": {
      "post": {
        "summary": "Reset password for a consultant",
        "tags": [
          "Consultants"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the consultant"
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset successfully"
          },
          "404": {
            "description": "Consultant not found"
          },
          "500": {
            "description": "Server error. Please try again."
          }
        }
      }
    },
    "/consultants/available/{bookingID}": {
      "get": {
        "summary": "Get available consultants for a booking",
        "tags": [
          "Consultants"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "bookingID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the booking"
          }
        ],
        "responses": {
          "200": {
            "description": "List of available consultants",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Consultant"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Booking not found"
          },
          "500": {
            "description": "Server error. Please try again."
          }
        }
      }
    },
    "/customers": {
      "get": {
        "summary": "Get all customers",
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of all customers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "An error occurred while fetching customers"
          }
        }
      }
    },
    "/customers/{id}": {
      "get": {
        "summary": "Get a customer by ID",
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the customer"
          }
        ],
        "responses": {
          "200": {
            "description": "Customer details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Customer not found"
          },
          "500": {
            "description": "An error occurred while fetching the customer"
          }
        }
      },
      "put": {
        "summary": "Update a customer profile",
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the customer"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "description": "The first name of the customer"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "The last name of the customer"
                  },
                  "phoneNumber": {
                    "type": "string",
                    "description": "The phone number of the customer"
                  }
                },
                "required": [
                  "firstName",
                  "lastName"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Customer not found"
          },
          "500": {
            "description": "An error occurred while updating the customer"
          }
        }
      },
      "delete": {
        "summary": "Delete a customer",
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the customer"
          }
        ],
        "responses": {
          "200": {
            "description": "Customer deleted successfully"
          },
          "404": {
            "description": "Customer not found"
          },
          "500": {
            "description": "An error occurred while deleting the customer"
          }
        }
      }
    },
    "/customers/change-password": {
      "post": {
        "summary": "Change customer password",
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "currentPassword": {
                    "type": "string",
                    "description": "The current password of the customer"
                  },
                  "newPassword": {
                    "type": "string",
                    "description": "The new password for the customer"
                  },
                  "userId": {
                    "type": "string",
                    "description": "The ID of the customer"
                  }
                },
                "required": [
                  "currentPassword",
                  "newPassword",
                  "userId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully"
          },
          "400": {
            "description": "Invalid input or password requirements not met"
          },
          "404": {
            "description": "Customer not found"
          },
          "500": {
            "description": "An error occurred while changing the password"
          }
        }
      }
    },
    "/feedbacks": {
      "post": {
        "summary": "Create feedback for a booking request",
        "tags": [
          "Feedbacks"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Feedback"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Feedback created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Feedback"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or booking request not completed"
          },
          "404": {
            "description": "Booking request not found"
          },
          "500": {
            "description": "An error occurred while creating feedback"
          }
        }
      }
    },
    "/feedbacks/{bookingRequestId}": {
      "get": {
        "summary": "Get feedback by booking request ID",
        "tags": [
          "Feedbacks"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "bookingRequestId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the booking request"
          }
        ],
        "responses": {
          "200": {
            "description": "Feedback for the booking request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Feedback"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Feedback not found"
          },
          "500": {
            "description": "An error occurred while fetching feedback"
          }
        }
      }
    },
    "/feedbacks/service-rating/{serviceId}": {
      "get": {
        "summary": "Get average service rating by service ID",
        "tags": [
          "Feedbacks"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the service"
          }
        ],
        "responses": {
          "200": {
            "description": "Average service rating",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "averageRating": {
                      "type": "number",
                      "description": "The average rating for the service"
                    },
                    "totalReviews": {
                      "type": "number",
                      "description": "The total number of reviews for the service"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Service not found"
          },
          "500": {
            "description": "An error occurred while fetching the average service rating"
          }
        }
      }
    },
    "/feedbacks/consultant-rating/{id}": {
      "get": {
        "summary": "Get average consultant rating by consultant ID",
        "tags": [
          "Feedbacks"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the consultant"
          }
        ],
        "responses": {
          "200": {
            "description": "Average consultant rating",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "averageRating": {
                      "type": "number",
                      "description": "The average rating for the consultant"
                    },
                    "totalReviews": {
                      "type": "number",
                      "description": "The total number of reviews for the consultant"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Consultant not found"
          },
          "500": {
            "description": "An error occurred while fetching the average consultant rating"
          }
        }
      }
    },
    "/feedbacks/service/{serviceId}": {
      "get": {
        "summary": "Get feedback for a specific service",
        "tags": [
          "Feedbacks"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the service"
          }
        ],
        "responses": {
          "200": {
            "description": "Feedback for the service",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Feedback"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Feedback not found"
          },
          "500": {
            "description": "An error occurred while fetching feedback for the service"
          }
        }
      }
    },
    "/feedbacks/consultant-rating": {
      "get": {
        "summary": "Get average ratings for all consultants",
        "tags": [
          "Feedbacks"
        ],
        "responses": {
          "200": {
            "description": "Average ratings for all consultants",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "consultantId": {
                        "type": "string",
                        "description": "The ID of the consultant"
                      },
                      "averageRating": {
                        "type": "number",
                        "description": "The average rating for the consultant"
                      },
                      "totalReviews": {
                        "type": "number",
                        "description": "The total number of reviews for the consultant"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occurred while fetching consultant ratings"
          }
        }
      }
    },
    "/order-items/{orderID}": {
      "get": {
        "summary": "Get all order items for a specific order",
        "tags": [
          "OrderItems"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the order"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all order items for the specified order",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderItem"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Order not found"
          },
          "500": {
            "description": "An error occurred while fetching order items"
          }
        }
      }
    },
    "/order-items": {
      "post": {
        "summary": "Add a new order item",
        "tags": [
          "OrderItems"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderItem"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order item added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderItem"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or order not in a valid state"
          },
          "403": {
            "description": "Unauthorized to add items to this order"
          },
          "500": {
            "description": "An error occurred while adding the order item"
          }
        }
      }
    },
    "/order-items/{id}": {
      "put": {
        "summary": "Update the quantity of an order item",
        "tags": [
          "OrderItems"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the order item"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "quantity": {
                    "type": "number",
                    "description": "The new quantity for the order item",
                    "minimum": 1
                  }
                },
                "required": [
                  "quantity"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order item quantity updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderItem"
                }
              }
            }
          },
          "400": {
            "description": "Invalid quantity or order not in a valid state"
          },
          "403": {
            "description": "Unauthorized to update this order item"
          },
          "404": {
            "description": "Order item not found"
          },
          "500": {
            "description": "An error occurred while updating the order item"
          }
        }
      },
      "delete": {
        "summary": "Delete an order item",
        "tags": [
          "OrderItems"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the order item"
          }
        ],
        "responses": {
          "200": {
            "description": "Order item deleted successfully"
          },
          "400": {
            "description": "Order not in a valid state for deletion"
          },
          "403": {
            "description": "Unauthorized to delete this order item"
          },
          "404": {
            "description": "Order item not found"
          },
          "500": {
            "description": "An error occurred while deleting the order item"
          }
        }
      }
    },
    "/orders": {
      "post": {
        "summary": "Create a new order",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "productID": {
                          "type": "string",
                          "description": "The ID of the product"
                        },
                        "quantity": {
                          "type": "number",
                          "description": "The quantity of the product",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "productID",
                        "quantity"
                      ]
                    }
                  }
                },
                "required": [
                  "items"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderProduct"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or no items in the order"
          },
          "500": {
            "description": "An error occurred while creating the order"
          }
        }
      },
      "get": {
        "summary": "Get all orders (Staff only)",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of all orders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderProduct"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "An error occurred while fetching orders"
          }
        }
      }
    },
    "/orders/my-orders": {
      "get": {
        "summary": "Get orders for the authenticated customer",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of orders for the authenticated customer",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderProduct"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "An error occurred while fetching customer orders"
          }
        }
      }
    },
    "/orders/{id}": {
      "get": {
        "summary": "Get an order by ID",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the order"
          }
        ],
        "responses": {
          "200": {
            "description": "Order details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderProduct"
                }
              }
            }
          },
          "404": {
            "description": "Order not found"
          },
          "500": {
            "description": "An error occurred while fetching the order"
          }
        }
      },
      "put": {
        "summary": "Update the status of an order",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the order"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "Pending",
                      "Confirmed",
                      "Cancelled",
                      "Completed"
                    ],
                    "description": "The new status of the order"
                  }
                },
                "required": [
                  "status"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderProduct"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status transition"
          },
          "404": {
            "description": "Order not found"
          },
          "500": {
            "description": "An error occurred while updating the order status"
          }
        }
      }
    },
    "/orders/cart": {
      "get": {
        "summary": "Get the cart for the authenticated customer",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Cart details for the authenticated customer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderProduct"
                }
              }
            }
          },
          "404": {
            "description": "Cart not found"
          },
          "500": {
            "description": "An error occurred while fetching the cart"
          }
        }
      }
    },
    "/orders/checkout": {
      "post": {
        "summary": "Checkout the cart for the authenticated customer",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Order confirmed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderProduct"
                }
              }
            }
          },
          "404": {
            "description": "Cart not found"
          },
          "500": {
            "description": "An error occurred while confirming the order"
          }
        }
      }
    },
    "/orders/{id}/cancel": {
      "put": {
        "summary": "Cancel an order",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the order"
          }
        ],
        "responses": {
          "200": {
            "description": "Order cancelled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderProduct"
                }
              }
            }
          },
          "400": {
            "description": "Only 'Pending' orders can be cancelled"
          },
          "403": {
            "description": "Forbidden: You can only cancel your own order"
          },
          "404": {
            "description": "Order not found"
          },
          "500": {
            "description": "An error occurred while cancelling the order"
          }
        }
      }
    },
    "/products": {
      "post": {
        "summary": "Create a new product",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "An error occurred while creating the product"
          }
        }
      },
      "get": {
        "summary": "Get all products",
        "tags": [
          "Products"
        ],
        "responses": {
          "200": {
            "description": "List of all products",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occurred while fetching products"
          }
        }
      }
    },
    "/products/{id}": {
      "get": {
        "summary": "Get a product by ID",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the product"
          }
        ],
        "responses": {
          "200": {
            "description": "Product details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Product not found"
          },
          "500": {
            "description": "An error occurred while fetching the product"
          }
        }
      },
      "put": {
        "summary": "Update a product by ID",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the product"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Product not found"
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "An error occurred while updating the product"
          }
        }
      },
      "delete": {
        "summary": "Delete a product by ID",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the product"
          }
        ],
        "responses": {
          "200": {
            "description": "Product deleted successfully"
          },
          "404": {
            "description": "Product not found"
          },
          "500": {
            "description": "An error occurred while deleting the product"
          }
        }
      }
    },
    "/users": {
      "post": {
        "summary": "Create a new user",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "summary": "Get all users",
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "List of all users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occurred while fetching users"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Get a user by ID",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "User details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "summary": "Update a user by ID",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a user by ID",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/staff": {
      "get": {
        "summary": "Get all staff members (Manager only)",
        "tags": [
          "Staff"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of all staff members",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "summary": "Create a new staff member (Manager only)",
        "tags": [
          "Staff"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Staff member created successfully"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/staff/{id}": {
      "get": {
        "summary": "Get a staff member by ID",
        "tags": [
          "Staff"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the staff member"
          }
        ],
        "responses": {
          "200": {
            "description": "Staff member details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Staff member not found"
          }
        }
      },
      "put": {
        "summary": "Update a staff member (Manager only)",
        "tags": [
          "Staff"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the staff member"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Staff member updated successfully"
          },
          "404": {
            "description": "Staff member not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a staff member (Manager only)",
        "tags": [
          "Staff"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the staff member"
          }
        ],
        "responses": {
          "200": {
            "description": "Staff member deleted successfully"
          },
          "404": {
            "description": "Staff member not found"
          }
        }
      }
    },
    "/staff/{id}/reset-password": {
      "post": {
        "summary": "Reset password for a staff member (Manager only)",
        "tags": [
          "Staff"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the staff member"
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset successfully"
          },
          "404": {
            "description": "Staff member not found"
          }
        }
      }
    },
    "/managers/users": {
      "get": {
        "summary": "Get all users (Manager only)",
        "tags": [
          "Managers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of all users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "An error occurred while fetching users"
          }
        }
      }
    },
    "/managers/users/{id}": {
      "get": {
        "summary": "Get a user by ID (Manager only)",
        "tags": [
          "Managers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "User details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "put": {
        "summary": "Update a user's role (Manager only)",
        "tags": [
          "Managers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "roleName": {
                    "type": "string",
                    "enum": [
                      "Customer",
                      "Staff",
                      "Manager",
                      "Consultant"
                    ],
                    "description": "The new role for the user"
                  }
                },
                "required": [
                  "roleName"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User role updated successfully"
          },
          "404": {
            "description": "User not found"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "summary": "Delete a user (Manager only)",
        "tags": [
          "Managers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "404": {
            "description": "User not found"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/managers/consultants/{id}/approve": {
      "put": {
        "summary": "Approve a consultant (Manager only)",
        "tags": [
          "Managers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the consultant"
          }
        ],
        "responses": {
          "200": {
            "description": "Consultant approved successfully"
          },
          "404": {
            "description": "Consultant not found"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/managers/products": {
      "get": {
        "summary": "Get all products (Manager only)",
        "tags": [
          "Managers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of all products",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "summary": "Create a new product (Manager only)",
        "tags": [
          "Managers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/managers/products/{id}": {
      "get": {
        "summary": "Get a product by ID (Manager only)",
        "tags": [
          "Managers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the product"
          }
        ],
        "responses": {
          "200": {
            "description": "Product details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Product not found"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "put": {
        "summary": "Update a product (Manager only)",
        "tags": [
          "Managers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the product"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated successfully"
          },
          "404": {
            "description": "Product not found"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "summary": "Delete a product (Manager only)",
        "tags": [
          "Managers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the product"
          }
        ],
        "responses": {
          "200": {
            "description": "Product deleted successfully"
          },
          "404": {
            "description": "Product not found"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    }
  }
}